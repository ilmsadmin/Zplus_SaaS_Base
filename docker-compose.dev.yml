# Zplus SaaS Base - Development Environment
# Docker Compose configuration for local development

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: zplus-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: zplus
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - zplus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d zplus"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: zplus-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo123
      MONGO_INITDB_DATABASE: zplus_metadata
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - zplus-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: zplus-redis-dev
    restart: unless-stopped
    command: redis-server --requirepass redis123 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zplus-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak Identity & Access Management
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: zplus-keycloak-dev
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres123
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8081
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_LOG_LEVEL: INFO
      KC_PROXY: edge
    ports:
      - "8081:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak/realm-config:/opt/keycloak/realm-config:ro
      - ./keycloak/themes:/opt/keycloak/themes:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zplus-network
    command: start-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`auth.localhost`)"
      - "traefik.http.routers.keycloak.entrypoints=web"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

  # Traefik API Gateway
  traefik:
    image: traefik:v3.0
    container_name: zplus-traefik-dev
    restart: unless-stopped
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=admin@zplus.io
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --log.level=DEBUG
      - --accesslog=true
      - --metrics.prometheus=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
    networks:
      - zplus-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"

  # MinIO for S3-compatible storage (development)
  minio:
    image: minio/minio:latest
    container_name: zplus-minio-dev
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"  # MinIO Console
    volumes:
      - minio_data:/data
    networks:
      - zplus-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: zplus-prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - zplus-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: zplus-grafana-dev
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - zplus-network

  # Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: zplus-loki-dev
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml
    networks:
      - zplus-network
    command: -config.file=/etc/loki/local-config.yaml

  # Promtail Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: zplus-promtail-dev
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - ./monitoring/promtail/promtail.yml:/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - zplus-network
    command: -config.file=/etc/promtail/config.yml

  # Jaeger Distributed Tracing (Optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: zplus-jaeger-dev
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
    networks:
      - zplus-network

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: zplus-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - zplus-network

  # Backend API (Development)
  # Uncomment when backend is ready
  # api:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.dev
  #   container_name: zplus-api-dev
  #   restart: unless-stopped
  #   environment:
  #     - ENV=development
  #     - DATABASE_URL=postgres://postgres:postgres123@postgres:5432/zplus?sslmode=disable
  #     - MONGODB_URL=mongodb://mongo:mongo123@mongodb:27017/zplus_metadata
  #     - REDIS_URL=redis://:redis123@redis:6379/0
  #     - KEYCLOAK_URL=http://keycloak:8080
  #   ports:
  #     - "8082:8080"
  #   volumes:
  #     - ./backend:/app
  #     - go_modules:/go/pkg/mod
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     mongodb:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     keycloak:
  #       condition: service_healthy
  #   networks:
  #     - zplus-network
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.api.rule=Host(`api.localhost`)"
  #     - "traefik.http.routers.api.entrypoints=web"
  #     - "traefik.http.services.api.loadbalancer.server.port=8080"

  # Frontend App (Development)
  # Uncomment when frontend is ready
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   container_name: zplus-frontend-dev
  #   restart: unless-stopped
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://api.localhost
  #     - NEXT_PUBLIC_GRAPHQL_URL=http://api.localhost/graphql
  #     - NEXTAUTH_URL=http://app.localhost
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - node_modules:/app/node_modules
  #   depends_on:
  #     - api
  #   networks:
  #     - zplus-network
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.frontend.rule=Host(`app.localhost`)"
  #     - "traefik.http.routers.frontend.entrypoints=web"
  #     - "traefik.http.services.frontend.loadbalancer.server.port=3000"

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  keycloak_data:
    driver: local
  traefik_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  # go_modules:
  #   driver: local
  # node_modules:
  #   driver: local

networks:
  zplus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
