-- Migration for Reporting & Analytics tables
-- Create analytics_reports table
CREATE TABLE IF NOT EXISTS analytics_reports (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) NOT NULL,
    user_id UUID NOT NULL,
    report_type VARCHAR(50) NOT NULL,
    report_subtype VARCHAR(50),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    period_start TIMESTAMP NOT NULL,
    period_end TIMESTAMP NOT NULL,
    parameters JSONB DEFAULT '{}',
    report_data JSONB DEFAULT '{}',
    summary JSONB DEFAULT '{}',
    file_path TEXT,
    file_url TEXT,
    file_format VARCHAR(20) DEFAULT 'json',
    file_size BIGINT DEFAULT 0,
    status VARCHAR(20) DEFAULT 'pending',
    error_message TEXT,
    scheduled_for TIMESTAMP,
    processing_stats JSONB DEFAULT '{}',
    expires_at TIMESTAMP,
    download_count INTEGER DEFAULT 0,
    last_download_at TIMESTAMP,
    is_recurring BOOLEAN DEFAULT FALSE,
    recurrence_rule TEXT,
    next_run_at TIMESTAMP,
    tags TEXT[],
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    completed_at TIMESTAMP,
    deleted_at TIMESTAMP
);

-- Create user_activity_metrics table
CREATE TABLE IF NOT EXISTS user_activity_metrics (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) NOT NULL,
    user_id UUID NOT NULL,
    date DATE NOT NULL,
    session_id VARCHAR(255),
    page_views INTEGER DEFAULT 0,
    unique_pages INTEGER DEFAULT 0,
    session_duration INTEGER DEFAULT 0,
    actions_count INTEGER DEFAULT 0,
    login_count INTEGER DEFAULT 0,
    last_seen_at TIMESTAMP,
    device_type VARCHAR(50),
    browser VARCHAR(100),
    platform VARCHAR(100),
    country VARCHAR(100),
    region VARCHAR(100),
    city VARCHAR(100),
    ip_address INET,
    referrer_domain VARCHAR(255),
    referrer_url TEXT,
    activity_data JSONB DEFAULT '{}',
    performance_metrics JSONB DEFAULT '{}',
    errors_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Create system_usage_metrics table
CREATE TABLE IF NOT EXISTS system_usage_metrics (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) NOT NULL,
    date DATE NOT NULL,
    hour INTEGER NOT NULL CHECK (hour >= 0 AND hour <= 23),
    metric_type VARCHAR(50) NOT NULL,
    metric_name VARCHAR(100) NOT NULL,
    metric_value DECIMAL(15,2) DEFAULT 0,
    metric_unit VARCHAR(20) DEFAULT 'count',
    
    -- API Usage metrics
    api_calls_total INTEGER DEFAULT 0,
    api_calls_success INTEGER DEFAULT 0,
    api_calls_error INTEGER DEFAULT 0,
    api_response_time INTEGER DEFAULT 0,
    
    -- Storage metrics
    storage_used BIGINT DEFAULT 0,
    bandwidth_used BIGINT DEFAULT 0,
    files_uploaded INTEGER DEFAULT 0,
    files_downloaded INTEGER DEFAULT 0,
    
    -- Database metrics
    database_queries INTEGER DEFAULT 0,
    database_query_time INTEGER DEFAULT 0,
    
    -- User metrics
    active_users INTEGER DEFAULT 0,
    new_users INTEGER DEFAULT 0,
    sessions_created INTEGER DEFAULT 0,
    login_attempts INTEGER DEFAULT 0,
    login_successful INTEGER DEFAULT 0,
    
    -- POS metrics
    orders_created INTEGER DEFAULT 0,
    revenue DECIMAL(15,2) DEFAULT 0,
    payments_processed INTEGER DEFAULT 0,
    
    -- Custom metrics
    custom_metrics JSONB DEFAULT '{}',
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Create report_exports table
CREATE TABLE IF NOT EXISTS report_exports (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) NOT NULL,
    user_id UUID NOT NULL,
    report_id UUID,
    export_type VARCHAR(20) NOT NULL,
    report_type VARCHAR(50) NOT NULL,
    title VARCHAR(255) NOT NULL,
    parameters JSONB DEFAULT '{}',
    data_query JSONB DEFAULT '{}',
    template VARCHAR(100),
    file_path TEXT,
    file_url TEXT,
    file_size BIGINT DEFAULT 0,
    status VARCHAR(20) DEFAULT 'pending',
    progress INTEGER DEFAULT 0,
    error_message TEXT,
    rows_processed INTEGER DEFAULT 0,
    total_rows INTEGER DEFAULT 0,
    started_at TIMESTAMP,
    completed_at TIMESTAMP,
    expires_at TIMESTAMP,
    download_count INTEGER DEFAULT 0,
    last_download_at TIMESTAMP,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    deleted_at TIMESTAMP
);

-- Create report_schedules table
CREATE TABLE IF NOT EXISTS report_schedules (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) NOT NULL,
    user_id UUID NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    report_type VARCHAR(50) NOT NULL,
    report_subtype VARCHAR(50),
    parameters JSONB DEFAULT '{}',
    schedule VARCHAR(100) NOT NULL,
    output_formats TEXT[],
    email_recipients TEXT[],
    retention_days INTEGER DEFAULT 30,
    is_active BOOLEAN DEFAULT TRUE,
    last_run_at TIMESTAMP,
    next_run_at TIMESTAMP,
    run_count INTEGER DEFAULT 0,
    error_count INTEGER DEFAULT 0,
    last_error TEXT,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    deleted_at TIMESTAMP
);

-- Create indexes for analytics_reports
CREATE INDEX IF NOT EXISTS idx_analytics_reports_tenant_id ON analytics_reports(tenant_id);
CREATE INDEX IF NOT EXISTS idx_analytics_reports_user_id ON analytics_reports(user_id);
CREATE INDEX IF NOT EXISTS idx_analytics_reports_type ON analytics_reports(report_type);
CREATE INDEX IF NOT EXISTS idx_analytics_reports_status ON analytics_reports(status);
CREATE INDEX IF NOT EXISTS idx_analytics_reports_period_start ON analytics_reports(period_start);
CREATE INDEX IF NOT EXISTS idx_analytics_reports_period_end ON analytics_reports(period_end);
CREATE INDEX IF NOT EXISTS idx_analytics_reports_expires_at ON analytics_reports(expires_at);
CREATE INDEX IF NOT EXISTS idx_analytics_reports_next_run ON analytics_reports(next_run_at);
CREATE INDEX IF NOT EXISTS idx_analytics_reports_deleted_at ON analytics_reports(deleted_at);

-- Create indexes for user_activity_metrics
CREATE INDEX IF NOT EXISTS idx_user_activity_tenant_id ON user_activity_metrics(tenant_id);
CREATE INDEX IF NOT EXISTS idx_user_activity_user_id ON user_activity_metrics(user_id);
CREATE INDEX IF NOT EXISTS idx_user_activity_date ON user_activity_metrics(date);
CREATE INDEX IF NOT EXISTS idx_user_activity_session_id ON user_activity_metrics(session_id);
CREATE INDEX IF NOT EXISTS idx_user_activity_device_type ON user_activity_metrics(device_type);
CREATE INDEX IF NOT EXISTS idx_user_activity_country ON user_activity_metrics(country);
CREATE INDEX IF NOT EXISTS idx_user_activity_tenant_date ON user_activity_metrics(tenant_id, date);
CREATE INDEX IF NOT EXISTS idx_user_activity_user_date ON user_activity_metrics(user_id, date);

-- Create indexes for system_usage_metrics
CREATE INDEX IF NOT EXISTS idx_system_metrics_tenant_id ON system_usage_metrics(tenant_id);
CREATE INDEX IF NOT EXISTS idx_system_metrics_date ON system_usage_metrics(date);
CREATE INDEX IF NOT EXISTS idx_system_metrics_hour ON system_usage_metrics(hour);
CREATE INDEX IF NOT EXISTS idx_system_metrics_type ON system_usage_metrics(metric_type);
CREATE INDEX IF NOT EXISTS idx_system_metrics_name ON system_usage_metrics(metric_name);
CREATE INDEX IF NOT EXISTS idx_system_metrics_tenant_date ON system_usage_metrics(tenant_id, date);
CREATE INDEX IF NOT EXISTS idx_system_metrics_tenant_type ON system_usage_metrics(tenant_id, metric_type);
CREATE INDEX IF NOT EXISTS idx_system_metrics_date_hour ON system_usage_metrics(date, hour);

-- Create indexes for report_exports
CREATE INDEX IF NOT EXISTS idx_report_exports_tenant_id ON report_exports(tenant_id);
CREATE INDEX IF NOT EXISTS idx_report_exports_user_id ON report_exports(user_id);
CREATE INDEX IF NOT EXISTS idx_report_exports_report_id ON report_exports(report_id);
CREATE INDEX IF NOT EXISTS idx_report_exports_status ON report_exports(status);
CREATE INDEX IF NOT EXISTS idx_report_exports_expires_at ON report_exports(expires_at);
CREATE INDEX IF NOT EXISTS idx_report_exports_deleted_at ON report_exports(deleted_at);

-- Create indexes for report_schedules
CREATE INDEX IF NOT EXISTS idx_report_schedules_tenant_id ON report_schedules(tenant_id);
CREATE INDEX IF NOT EXISTS idx_report_schedules_user_id ON report_schedules(user_id);
CREATE INDEX IF NOT EXISTS idx_report_schedules_is_active ON report_schedules(is_active);
CREATE INDEX IF NOT EXISTS idx_report_schedules_next_run ON report_schedules(next_run_at);
CREATE INDEX IF NOT EXISTS idx_report_schedules_deleted_at ON report_schedules(deleted_at);

-- Add foreign key constraints
ALTER TABLE analytics_reports 
ADD CONSTRAINT fk_analytics_reports_user 
FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE;

ALTER TABLE user_activity_metrics 
ADD CONSTRAINT fk_user_activity_user 
FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE;

ALTER TABLE report_exports 
ADD CONSTRAINT fk_report_exports_user 
FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE;

ALTER TABLE report_exports 
ADD CONSTRAINT fk_report_exports_report 
FOREIGN KEY (report_id) REFERENCES analytics_reports(id) ON DELETE SET NULL;

ALTER TABLE report_schedules 
ADD CONSTRAINT fk_report_schedules_user 
FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE;

-- Add trigger to update updated_at columns
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_analytics_reports_updated_at 
    BEFORE UPDATE ON analytics_reports 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_activity_metrics_updated_at 
    BEFORE UPDATE ON user_activity_metrics 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_system_usage_metrics_updated_at 
    BEFORE UPDATE ON system_usage_metrics 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_report_exports_updated_at 
    BEFORE UPDATE ON report_exports 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_report_schedules_updated_at 
    BEFORE UPDATE ON report_schedules 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create composite indexes for common queries
CREATE INDEX IF NOT EXISTS idx_analytics_reports_tenant_type_status 
ON analytics_reports(tenant_id, report_type, status);

CREATE INDEX IF NOT EXISTS idx_user_activity_tenant_user_date 
ON user_activity_metrics(tenant_id, user_id, date DESC);

CREATE INDEX IF NOT EXISTS idx_system_metrics_tenant_date_type 
ON system_usage_metrics(tenant_id, date DESC, metric_type);

-- Add check constraints
ALTER TABLE analytics_reports 
ADD CONSTRAINT chk_analytics_reports_status 
CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'expired'));

ALTER TABLE analytics_reports 
ADD CONSTRAINT chk_analytics_reports_file_format 
CHECK (file_format IN ('json', 'pdf', 'excel', 'csv'));

ALTER TABLE analytics_reports 
ADD CONSTRAINT chk_analytics_reports_type 
CHECK (report_type IN ('sales', 'users', 'system', 'inventory', 'financial'));

ALTER TABLE report_exports 
ADD CONSTRAINT chk_report_exports_status 
CHECK (status IN ('pending', 'processing', 'completed', 'failed'));

ALTER TABLE report_exports 
ADD CONSTRAINT chk_report_exports_type 
CHECK (export_type IN ('pdf', 'excel', 'csv'));

ALTER TABLE report_exports 
ADD CONSTRAINT chk_report_exports_progress 
CHECK (progress >= 0 AND progress <= 100);

-- Add comments for documentation
COMMENT ON TABLE analytics_reports IS 'Stores generated analytics reports and their metadata';
COMMENT ON TABLE user_activity_metrics IS 'Tracks user activity metrics for analytics and reporting';
COMMENT ON TABLE system_usage_metrics IS 'Stores system-level usage metrics and performance data';
COMMENT ON TABLE report_exports IS 'Manages report export requests and their status';
COMMENT ON TABLE report_schedules IS 'Defines scheduled recurring reports';

COMMENT ON COLUMN analytics_reports.tenant_id IS 'Tenant identifier for multi-tenant isolation';
COMMENT ON COLUMN analytics_reports.report_type IS 'Type of report: sales, users, system, inventory, financial';
COMMENT ON COLUMN analytics_reports.status IS 'Report generation status: pending, processing, completed, failed, expired';
COMMENT ON COLUMN analytics_reports.file_format IS 'Output format: json, pdf, excel, csv';

COMMENT ON COLUMN user_activity_metrics.session_duration IS 'Duration in seconds';
COMMENT ON COLUMN user_activity_metrics.activity_data IS 'Additional activity data in JSON format';
COMMENT ON COLUMN user_activity_metrics.performance_metrics IS 'Performance metrics like page load time';

COMMENT ON COLUMN system_usage_metrics.metric_value IS 'Numeric value of the metric';
COMMENT ON COLUMN system_usage_metrics.hour IS 'Hour of day (0-23) for hourly metrics';
COMMENT ON COLUMN system_usage_metrics.api_response_time IS 'Average API response time in milliseconds';

-- Insert sample data for testing (optional)
-- Note: This would normally be in a separate seeder script
-- Uncomment the following lines if you want sample data

/*
-- Sample analytics report
INSERT INTO analytics_reports (tenant_id, user_id, report_type, report_subtype, title, description, period_start, period_end, status) 
VALUES (
    'demo_tenant', 
    (SELECT id FROM users WHERE email = 'admin@demo.com' LIMIT 1),
    'system',
    'weekly',
    'Weekly System Usage Report',
    'Comprehensive system usage analysis for the past week',
    NOW() - INTERVAL '7 days',
    NOW(),
    'completed'
);

-- Sample user activity metrics
INSERT INTO user_activity_metrics (tenant_id, user_id, date, session_id, page_views, session_duration, device_type, browser, country)
VALUES (
    'demo_tenant',
    (SELECT id FROM users WHERE email = 'user@demo.com' LIMIT 1),
    CURRENT_DATE,
    'session_' || gen_random_uuid(),
    15,
    1800,
    'desktop',
    'Chrome',
    'United States'
);

-- Sample system usage metrics
INSERT INTO system_usage_metrics (tenant_id, date, hour, metric_type, metric_name, metric_value, api_calls_total, api_calls_success)
VALUES (
    'demo_tenant',
    CURRENT_DATE,
    EXTRACT(hour FROM NOW())::INTEGER,
    'api_usage',
    'requests_per_hour',
    120.0,
    120,
    118
);
*/
