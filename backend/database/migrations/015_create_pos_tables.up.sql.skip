-- Migration: Create POS (Point of Sale) tables
-- Description: Comprehensive POS system with product management, inventory, sales, and payment processing
-- Author: System
-- Date: August 8, 2025

-- Enable UUID extension if not exists
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Product categories table (hierarchical structure)
CREATE TABLE product_categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    slug VARCHAR(255) NOT NULL,
    parent_id UUID REFERENCES product_categories(id) ON DELETE SET NULL,
    image_url VARCHAR(500),
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP WITH TIME ZONE
);

CREATE UNIQUE INDEX idx_product_categories_tenant_slug ON product_categories(tenant_id, slug);
CREATE INDEX idx_product_categories_tenant_id ON product_categories(tenant_id);
CREATE INDEX idx_product_categories_parent_id ON product_categories(parent_id);
CREATE INDEX idx_product_categories_active ON product_categories(tenant_id, is_active);

-- Products table
CREATE TABLE products (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    category_id UUID REFERENCES product_categories(id) ON DELETE SET NULL,
    sku VARCHAR(100) NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    short_description VARCHAR(500),
    product_type VARCHAR(50) DEFAULT 'simple', -- simple, variable, grouped, external
    status VARCHAR(50) DEFAULT 'draft', -- draft, published, private, pending
    featured BOOLEAN DEFAULT false,
    
    -- Pricing
    regular_price DECIMAL(15,2),
    sale_price DECIMAL(15,2),
    cost_price DECIMAL(15,2),
    
    -- Physical properties
    weight DECIMAL(10,3),
    length DECIMAL(10,2),
    width DECIMAL(10,2),
    height DECIMAL(10,2),
    
    -- Inventory
    manage_stock BOOLEAN DEFAULT true,
    stock_quantity INTEGER DEFAULT 0,
    low_stock_threshold INTEGER DEFAULT 5,
    stock_status VARCHAR(50) DEFAULT 'instock', -- instock, outofstock, onbackorder
    backorders VARCHAR(50) DEFAULT 'no', -- no, notify, yes
    
    -- SEO and visibility
    slug VARCHAR(255) NOT NULL,
    menu_order INTEGER DEFAULT 0,
    meta_title VARCHAR(255),
    meta_description TEXT,
    
    -- Images and gallery
    featured_image VARCHAR(500),
    gallery_images JSONB DEFAULT '[]',
    
    -- Additional data
    attributes JSONB DEFAULT '{}', -- Custom product attributes
    metadata JSONB DEFAULT '{}',
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP WITH TIME ZONE
);

CREATE UNIQUE INDEX idx_products_tenant_sku ON products(tenant_id, sku);
CREATE UNIQUE INDEX idx_products_tenant_slug ON products(tenant_id, slug);
CREATE INDEX idx_products_tenant_id ON products(tenant_id);
CREATE INDEX idx_products_category_id ON products(category_id);
CREATE INDEX idx_products_status ON products(tenant_id, status);
CREATE INDEX idx_products_featured ON products(tenant_id, featured);
CREATE INDEX idx_products_stock_status ON products(tenant_id, stock_status);

-- Product variations table (for variable products)
CREATE TABLE product_variations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    sku VARCHAR(100) NOT NULL,
    regular_price DECIMAL(15,2),
    sale_price DECIMAL(15,2),
    cost_price DECIMAL(15,2),
    stock_quantity INTEGER DEFAULT 0,
    stock_status VARCHAR(50) DEFAULT 'instock',
    weight DECIMAL(10,3),
    length DECIMAL(10,2),
    width DECIMAL(10,2),
    height DECIMAL(10,2),
    image VARCHAR(500),
    attributes JSONB DEFAULT '{}', -- Variation attributes like size, color
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_product_variations_product_id ON product_variations(product_id);
CREATE INDEX idx_product_variations_sku ON product_variations(sku);

-- Inventory tracking table
CREATE TABLE inventory_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    variation_id UUID REFERENCES product_variations(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL, -- 'in', 'out', 'adjustment', 'sale', 'return'
    quantity INTEGER NOT NULL,
    quantity_before INTEGER NOT NULL,
    quantity_after INTEGER NOT NULL,
    reason VARCHAR(255),
    reference_id UUID, -- Reference to order, return, etc.
    reference_type VARCHAR(100), -- 'order', 'return', 'adjustment'
    cost_per_unit DECIMAL(15,2),
    total_cost DECIMAL(15,2),
    user_id UUID REFERENCES users(id),
    notes TEXT,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_inventory_logs_tenant_id ON inventory_logs(tenant_id);
CREATE INDEX idx_inventory_logs_product_id ON inventory_logs(product_id);
CREATE INDEX idx_inventory_logs_type ON inventory_logs(type);
CREATE INDEX idx_inventory_logs_reference ON inventory_logs(reference_type, reference_id);
CREATE INDEX idx_inventory_logs_created_at ON inventory_logs(created_at);

-- Shopping carts table
CREATE TABLE carts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id) ON DELETE SET NULL,
    session_id VARCHAR(255), -- For guest users
    status VARCHAR(50) DEFAULT 'active', -- active, abandoned, converted
    currency VARCHAR(3) DEFAULT 'USD',
    subtotal DECIMAL(15,2) DEFAULT 0,
    tax_total DECIMAL(15,2) DEFAULT 0,
    shipping_total DECIMAL(15,2) DEFAULT 0,
    discount_total DECIMAL(15,2) DEFAULT 0,
    total DECIMAL(15,2) DEFAULT 0,
    expires_at TIMESTAMP WITH TIME ZONE,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_carts_tenant_id ON carts(tenant_id);
CREATE INDEX idx_carts_user_id ON carts(user_id);
CREATE INDEX idx_carts_session_id ON carts(session_id);
CREATE INDEX idx_carts_status ON carts(status);
CREATE INDEX idx_carts_expires_at ON carts(expires_at);

-- Cart items table
CREATE TABLE cart_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    cart_id UUID NOT NULL REFERENCES carts(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    variation_id UUID REFERENCES product_variations(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL DEFAULT 1,
    unit_price DECIMAL(15,2) NOT NULL,
    total_price DECIMAL(15,2) NOT NULL,
    product_data JSONB, -- Snapshot of product data at time of adding
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_cart_items_cart_id ON cart_items(cart_id);
CREATE INDEX idx_cart_items_product_id ON cart_items(product_id);
CREATE UNIQUE INDEX idx_cart_items_unique ON cart_items(cart_id, product_id, COALESCE(variation_id, '00000000-0000-0000-0000-000000000000'::UUID));

-- Orders table
CREATE TABLE orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    order_number VARCHAR(100) NOT NULL,
    user_id UUID REFERENCES users(id) ON DELETE SET NULL,
    
    -- Order status
    status VARCHAR(50) DEFAULT 'pending', -- pending, processing, shipped, delivered, cancelled, refunded
    payment_status VARCHAR(50) DEFAULT 'pending', -- pending, paid, failed, refunded, partially_refunded
    
    -- Customer information
    customer_email VARCHAR(255),
    customer_phone VARCHAR(50),
    billing_address JSONB,
    shipping_address JSONB,
    
    -- Financial details
    currency VARCHAR(3) DEFAULT 'USD',
    subtotal DECIMAL(15,2) NOT NULL DEFAULT 0,
    tax_total DECIMAL(15,2) DEFAULT 0,
    shipping_total DECIMAL(15,2) DEFAULT 0,
    discount_total DECIMAL(15,2) DEFAULT 0,
    total DECIMAL(15,2) NOT NULL DEFAULT 0,
    
    -- Payment information
    payment_method VARCHAR(100),
    payment_method_title VARCHAR(255),
    transaction_id VARCHAR(255),
    
    -- Dates
    date_created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    date_modified TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    date_completed TIMESTAMP WITH TIME ZONE,
    date_paid TIMESTAMP WITH TIME ZONE,
    
    -- Additional data
    customer_note TEXT,
    staff_notes TEXT,
    metadata JSONB DEFAULT '{}'
);

CREATE UNIQUE INDEX idx_orders_tenant_order_number ON orders(tenant_id, order_number);
CREATE INDEX idx_orders_tenant_id ON orders(tenant_id);
CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_payment_status ON orders(payment_status);
CREATE INDEX idx_orders_customer_email ON orders(customer_email);
CREATE INDEX idx_orders_date_created ON orders(date_created);

-- Order items table
CREATE TABLE order_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES products(id),
    variation_id UUID REFERENCES product_variations(id),
    quantity INTEGER NOT NULL,
    unit_price DECIMAL(15,2) NOT NULL,
    total_price DECIMAL(15,2) NOT NULL,
    
    -- Snapshot data (in case product is deleted)
    product_name VARCHAR(255) NOT NULL,
    product_sku VARCHAR(100),
    product_data JSONB, -- Full product snapshot
    
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);

-- Payment transactions table
CREATE TABLE payment_transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    
    -- Transaction details
    transaction_id VARCHAR(255) NOT NULL,
    payment_gateway VARCHAR(100) NOT NULL, -- stripe, paypal, square, etc.
    payment_method VARCHAR(100), -- card, bank_transfer, cash, etc.
    
    -- Financial details
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'USD',
    fee DECIMAL(15,2) DEFAULT 0,
    net_amount DECIMAL(15,2),
    
    -- Status and type
    status VARCHAR(50) NOT NULL, -- pending, completed, failed, cancelled, refunded
    type VARCHAR(50) NOT NULL, -- payment, refund, partial_refund
    
    -- Gateway response
    gateway_response JSONB,
    failure_reason TEXT,
    
    -- Reference
    parent_transaction_id UUID REFERENCES payment_transactions(id),
    
    -- Timestamps
    processed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_payment_transactions_tenant_id ON payment_transactions(tenant_id);
CREATE INDEX idx_payment_transactions_order_id ON payment_transactions(order_id);
CREATE INDEX idx_payment_transactions_transaction_id ON payment_transactions(transaction_id);
CREATE INDEX idx_payment_transactions_status ON payment_transactions(status);
CREATE INDEX idx_payment_transactions_gateway ON payment_transactions(payment_gateway);
CREATE INDEX idx_payment_transactions_processed_at ON payment_transactions(processed_at);

-- Receipts table
CREATE TABLE receipts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    order_id UUID NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    receipt_number VARCHAR(100) NOT NULL,
    
    -- Receipt data
    receipt_data JSONB NOT NULL, -- Complete receipt information
    receipt_html TEXT, -- HTML version for display
    receipt_pdf_path VARCHAR(500), -- Path to PDF file
    
    -- Email information
    email_sent BOOLEAN DEFAULT false,
    email_sent_at TIMESTAMP WITH TIME ZONE,
    email_recipient VARCHAR(255),
    
    -- Print information
    printed BOOLEAN DEFAULT false,
    print_count INTEGER DEFAULT 0,
    last_printed_at TIMESTAMP WITH TIME ZONE,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX idx_receipts_tenant_receipt_number ON receipts(tenant_id, receipt_number);
CREATE INDEX idx_receipts_tenant_id ON receipts(tenant_id);
CREATE INDEX idx_receipts_order_id ON receipts(order_id);

-- Sales reports table (for caching/performance)
CREATE TABLE sales_reports (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    report_type VARCHAR(100) NOT NULL, -- daily, weekly, monthly, yearly, custom
    period_start DATE NOT NULL,
    period_end DATE NOT NULL,
    
    -- Sales metrics
    total_sales DECIMAL(15,2) DEFAULT 0,
    total_orders INTEGER DEFAULT 0,
    total_items INTEGER DEFAULT 0,
    average_order_value DECIMAL(15,2) DEFAULT 0,
    
    -- Product metrics
    top_products JSONB DEFAULT '[]',
    categories_performance JSONB DEFAULT '{}',
    
    -- Customer metrics
    new_customers INTEGER DEFAULT 0,
    returning_customers INTEGER DEFAULT 0,
    
    -- Payment metrics
    payment_methods JSONB DEFAULT '{}',
    
    -- Additional metrics
    refund_amount DECIMAL(15,2) DEFAULT 0,
    refund_orders INTEGER DEFAULT 0,
    
    report_data JSONB DEFAULT '{}', -- Full report data
    generated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP WITH TIME ZONE
);

CREATE UNIQUE INDEX idx_sales_reports_unique ON sales_reports(tenant_id, report_type, period_start, period_end);
CREATE INDEX idx_sales_reports_tenant_id ON sales_reports(tenant_id);
CREATE INDEX idx_sales_reports_type_period ON sales_reports(report_type, period_start, period_end);
CREATE INDEX idx_sales_reports_generated_at ON sales_reports(generated_at);

-- Discounts and coupons table
CREATE TABLE discounts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    
    -- Basic info
    code VARCHAR(100) NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    
    -- Discount type and value
    discount_type VARCHAR(50) NOT NULL, -- percentage, fixed_amount, free_shipping
    discount_value DECIMAL(15,2) NOT NULL,
    
    -- Usage restrictions
    minimum_amount DECIMAL(15,2),
    maximum_amount DECIMAL(15,2),
    usage_limit INTEGER,
    usage_limit_per_customer INTEGER,
    used_count INTEGER DEFAULT 0,
    
    -- Product restrictions
    applicable_products JSONB DEFAULT '[]', -- Array of product IDs
    excluded_products JSONB DEFAULT '[]',
    applicable_categories JSONB DEFAULT '[]',
    excluded_categories JSONB DEFAULT '[]',
    
    -- Date restrictions
    starts_at TIMESTAMP WITH TIME ZONE,
    expires_at TIMESTAMP WITH TIME ZONE,
    
    -- Status
    is_active BOOLEAN DEFAULT true,
    
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE UNIQUE INDEX idx_discounts_tenant_code ON discounts(tenant_id, code);
CREATE INDEX idx_discounts_tenant_id ON discounts(tenant_id);
CREATE INDEX idx_discounts_code ON discounts(code);
CREATE INDEX idx_discounts_active ON discounts(is_active);
CREATE INDEX idx_discounts_dates ON discounts(starts_at, expires_at);

-- Customer wishlists table
CREATE TABLE wishlists (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tenant_id VARCHAR(50) REFERENCES tenants(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) DEFAULT 'My Wishlist',
    is_public BOOLEAN DEFAULT false,
    share_token VARCHAR(255) UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_wishlists_tenant_id ON wishlists(tenant_id);
CREATE INDEX idx_wishlists_user_id ON wishlists(user_id);
CREATE INDEX idx_wishlists_share_token ON wishlists(share_token);

-- Wishlist items table
CREATE TABLE wishlist_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    wishlist_id UUID NOT NULL REFERENCES wishlists(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    variation_id UUID REFERENCES product_variations(id) ON DELETE CASCADE,
    added_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_wishlist_items_wishlist_id ON wishlist_items(wishlist_id);
CREATE INDEX idx_wishlist_items_product_id ON wishlist_items(product_id);
CREATE UNIQUE INDEX idx_wishlist_items_unique ON wishlist_items(wishlist_id, product_id, COALESCE(variation_id, '00000000-0000-0000-0000-000000000000'::UUID));

-- Create functions for automatic timestamp updates
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_product_categories_updated_at BEFORE UPDATE ON product_categories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_product_variations_updated_at BEFORE UPDATE ON product_variations FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_carts_updated_at BEFORE UPDATE ON carts FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_cart_items_updated_at BEFORE UPDATE ON cart_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_payment_transactions_updated_at BEFORE UPDATE ON payment_transactions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_receipts_updated_at BEFORE UPDATE ON receipts FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_discounts_updated_at BEFORE UPDATE ON discounts FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_wishlists_updated_at BEFORE UPDATE ON wishlists FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create function to generate order number
CREATE OR REPLACE FUNCTION generate_order_number(tenant_id_param VARCHAR(50))
RETURNS VARCHAR(100) AS $$
DECLARE
    order_count INTEGER;
    order_number VARCHAR(100);
BEGIN
    -- Get count of orders for this tenant today
    SELECT COUNT(*) INTO order_count
    FROM orders 
    WHERE tenant_id = tenant_id_param 
    AND DATE(date_created) = CURRENT_DATE;
    
    -- Generate order number: YYYYMMDD-TENANTPREFIX-SEQUENCE
    order_number := TO_CHAR(CURRENT_DATE, 'YYYYMMDD') || '-' || 
                   SUBSTRING(tenant_id_param, 1, 8) || '-' || 
                   LPAD((order_count + 1)::text, 4, '0');
    
    RETURN order_number;
END;
$$ LANGUAGE plpgsql;

-- Create function to generate receipt number
CREATE OR REPLACE FUNCTION generate_receipt_number(tenant_id_param VARCHAR(50))
RETURNS VARCHAR(100) AS $$
DECLARE
    receipt_count INTEGER;
    receipt_number VARCHAR(100);
BEGIN
    -- Get count of receipts for this tenant today
    SELECT COUNT(*) INTO receipt_count
    FROM receipts 
    WHERE tenant_id = tenant_id_param 
    AND DATE(created_at) = CURRENT_DATE;
    
    -- Generate receipt number: RCP-YYYYMMDD-TENANTPREFIX-SEQUENCE
    receipt_number := 'RCP-' || TO_CHAR(CURRENT_DATE, 'YYYYMMDD') || '-' || 
                     SUBSTRING(tenant_id_param, 1, 8) || '-' || 
                     LPAD((receipt_count + 1)::text, 4, '0');
    
    RETURN receipt_number;
END;
$$ LANGUAGE plpgsql;

-- Create indexes for performance
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_products_search ON products USING gin(to_tsvector('english', name || ' ' || COALESCE(description, '')));
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_orders_date_range ON orders (tenant_id, date_created);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_inventory_logs_date_range ON inventory_logs (tenant_id, created_at);

-- Add comments
COMMENT ON TABLE product_categories IS 'Hierarchical product categories per tenant';
COMMENT ON TABLE products IS 'Main products table with full e-commerce features';
COMMENT ON TABLE product_variations IS 'Product variations for configurable products';
COMMENT ON TABLE inventory_logs IS 'Audit trail for all inventory movements';
COMMENT ON TABLE carts IS 'Shopping carts for users and guests';
COMMENT ON TABLE cart_items IS 'Individual items in shopping carts';
COMMENT ON TABLE orders IS 'Customer orders with full lifecycle tracking';
COMMENT ON TABLE order_items IS 'Individual items within orders';
COMMENT ON TABLE payment_transactions IS 'Payment processing and transaction history';
COMMENT ON TABLE receipts IS 'Generated receipts for orders';
COMMENT ON TABLE sales_reports IS 'Cached sales reports for performance';
COMMENT ON TABLE discounts IS 'Discount codes and promotional offers';
COMMENT ON TABLE wishlists IS 'Customer wishlists and favorites';
COMMENT ON TABLE wishlist_items IS 'Individual items in wishlists';