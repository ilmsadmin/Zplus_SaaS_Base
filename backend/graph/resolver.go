package graph

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/ilmsadmin/zplus-saas-base/internal/application/services"
	"github.com/ilmsadmin/zplus-saas-base/internal/domain"
)

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

type Resolver struct {
	userService services.UserService
	fileService services.FileService
}

// NewResolver creates a new resolver instance
func NewResolver(userService services.UserService, fileService services.FileService) *Resolver {
	return &Resolver{
		userService: userService,
		fileService: fileService,
	}
}

// User Query Resolvers

func (r *Resolver) GetUser(ctx context.Context, id string) (*domain.User, error) {
	userID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %v", err)
	}
	return r.userService.GetUser(ctx, userID)
}

func (r *Resolver) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	return r.userService.GetUserByEmail(ctx, email)
}

func (r *Resolver) ListUsers(ctx context.Context, page, limit int, sort, filter, status, role, tenantID string) ([]*domain.User, error) {
	req := &services.ListUsersRequest{
		Page:     page,
		Limit:    limit,
		Sort:     sort,
		Filter:   filter,
		Status:   status,
		Role:     role,
		TenantID: tenantID,
	}
	response, err := r.userService.ListUsers(ctx, req)
	if err != nil {
		return nil, err
	}

	// Convert UserResponse to domain.User
	users := make([]*domain.User, len(response.Users))
	for i, userResp := range response.Users {
		users[i] = &domain.User{
			ID:            userResp.ID,
			Email:         userResp.Email,
			Username:      userResp.Username,
			FirstName:     userResp.FirstName,
			LastName:      userResp.LastName,
			Phone:         userResp.Phone,
			Avatar:        userResp.Avatar,
			AvatarURL:     userResp.AvatarURL,
			Status:        userResp.Status,
			EmailVerified: userResp.EmailVerified,
			PhoneVerified: userResp.PhoneVerified,
			LastLoginAt:   userResp.LastLoginAt,
			LoginCount:    userResp.LoginCount,
			Preferences:   userResp.Preferences,
			Metadata:      userResp.Metadata,
			CreatedAt:     userResp.CreatedAt,
			UpdatedAt:     userResp.UpdatedAt,
		}
	}
	return users, nil
}
