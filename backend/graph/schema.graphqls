# GraphQL schema for Zplus SaaS Base

scalar Time
scalar UUID
scalar Upload

type Tenant {
  id: UUID!
  name: String!
  subdomain: String!
  status: String!
  settings: TenantSettings
  domains: [TenantDomain!]!
  createdAt: Time!
  updatedAt: Time!
}

type TenantSettings {
  theme: String
  language: String
  timezone: String
  features: [String!]
  branding: TenantBranding
}

type TenantBranding {
  logo: String
  faviconURL: String
  primaryColor: String
  secondaryColor: String
}

type TenantDomain {
  id: UUID!
  tenantId: UUID!
  domain: String!
  isVerified: Boolean!
  isPrimary: Boolean!
  createdAt: Time!
  updatedAt: Time!
}

type User {
  id: UUID!
  keycloakUserId: String
  email: String!
  username: String
  firstName: String
  lastName: String
  phone: String
  avatar: String
  avatarUrl: String
  status: String!
  emailVerified: Boolean!
  phoneVerified: Boolean!
  lastLoginAt: Time
  loginCount: Int!
  preferences: String
  metadata: String
  tenantUsers: [TenantUser!]!
  userRoles: [UserRole!]!
  sessions: [UserSession!]!
  createdAt: Time!
  updatedAt: Time!
}

type UserSession {
  id: UUID!
  userId: UUID!
  tenantId: UUID
  sessionToken: String!
  ipAddress: String
  userAgent: String
  expiresAt: Time!
  lastAccessedAt: Time!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  tenant: Tenant
}

type UserPreference {
  id: UUID!
  userId: UUID!
  tenantId: UUID
  category: String!
  key: String!
  value: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  tenant: Tenant
}

type File {
  id: UUID!
  tenantId: UUID
  userId: UUID!
  fileName: String!
  originalName: String!
  mimeType: String!
  size: Int!
  path: String!
  url: String!
  storageType: String!
  category: String
  tags: [String!]!
  isPublic: Boolean!
  expiresAt: Time
  metadata: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  tenant: Tenant
}

type TenantUser {
  id: UUID!
  tenantId: UUID!
  userId: UUID!
  role: String!
  status: String!
  joinedAt: Time!
  tenant: Tenant!
  user: User!
}

# RBAC Types
type Role {
  id: UUID!
  name: String!
  description: String
  isSystem: Boolean!
  tenantId: UUID
  permissions: [Permission!]!
  createdAt: Time!
  updatedAt: Time!
  tenant: Tenant
}

type Permission {
  id: UUID!
  name: String!
  resource: String!
  action: String!
  description: String
  createdAt: Time!
  updatedAt: Time!
}

type UserRole {
  id: UUID!
  userId: UUID!
  roleId: UUID!
  tenantId: UUID!
  status: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  role: Role!
  tenant: Tenant!
}

type APIKey {
  id: UUID!
  tenantId: UUID!
  name: String!
  key: String!
  permissions: [String!]!
  expiresAt: Time
  lastUsedAt: Time
  createdAt: Time!
  updatedAt: Time!
}

type AuditLog {
  id: UUID!
  tenantId: UUID!
  userId: UUID
  action: String!
  resource: String!
  resourceId: String
  ipAddress: String
  userAgent: String
  createdAt: Time!
  tenant: Tenant!
  user: User
}

# Input types
input CreateTenantInput {
  name: String!
  subdomain: String!
  settings: TenantSettingsInput
}

input UpdateTenantInput {
  id: UUID!
  name: String
  status: String
  settings: TenantSettingsInput
}

# RBAC Input types
input CreateRoleInput {
  name: String!
  description: String
  tenantId: UUID
  permissions: [UUID!]
}

input UpdateRoleInput {
  name: String
  description: String
  permissions: [UUID!]
}

input AssignRoleInput {
  userId: UUID!
  roleId: UUID!
  tenantId: UUID!
}

input CreatePermissionInput {
  name: String!
  resource: String!
  action: String!
  description: String
}

input TenantSettingsInput {
  theme: String
  language: String
  timezone: String
  features: [String!]
  branding: TenantBrandingInput
}

input TenantBrandingInput {
  logo: String
  faviconURL: String
  primaryColor: String
  secondaryColor: String
}

input CreateUserInput {
  email: String!
  username: String
  firstName: String!
  lastName: String!
  phone: String
  emailVerified: Boolean
  phoneVerified: Boolean
}

input UpdateUserInput {
  id: UUID!
  username: String
  firstName: String
  lastName: String
  phone: String
  avatar: String
  status: String
  emailVerified: Boolean
  phoneVerified: Boolean
  metadata: String
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  phone: String
  bio: String
  metadata: String
}

input CreateSystemAdminInput {
  email: String!
  username: String
  firstName: String!
  lastName: String!
  phone: String
}

input CreateTenantAdminInput {
  tenantId: UUID!
  email: String!
  username: String
  firstName: String!
  lastName: String!
  phone: String
}

input UpdateUserPreferencesInput {
  userId: UUID!
  tenantId: UUID
  preferences: String!
}

input SetUserPreferenceInput {
  userId: UUID!
  tenantId: UUID
  category: String!
  key: String!
  value: String!
}

input AssignUserRoleInput {
  userId: UUID!
  tenantId: UUID!
  roleId: UUID!
}

input UpdateUserRolesInput {
  userId: UUID!
  tenantId: UUID!
  roleIds: [UUID!]!
}

input AddUserToTenantInput {
  tenantId: UUID!
  userId: UUID!
  role: String!
}

input CreateDomainInput {
  tenantId: UUID!
  domain: String!
}

input CreateAPIKeyInput {
  tenantId: UUID!
  name: String!
  permissions: [String!]!
  expiresAt: Time
}

# Pagination
input PaginationInput {
  limit: Int = 20
  offset: Int = 0
}

type TenantConnection {
  nodes: [Tenant!]!
  totalCount: Int!
}

type UserConnection {
  nodes: [User!]!
  totalCount: Int!
}

type AuditLogConnection {
  nodes: [AuditLog!]!
  totalCount: Int!
}

# RBAC Connections
type RoleConnection {
  nodes: [Role!]!
  totalCount: Int!
}

type PermissionConnection {
  nodes: [Permission!]!
  totalCount: Int!
}

type UserRoleConnection {
  nodes: [UserRole!]!
  totalCount: Int!
}

# Queries
type Query {
  # Tenant queries
  tenant(id: UUID!): Tenant
  tenantBySubdomain(subdomain: String!): Tenant
  tenants(pagination: PaginationInput): TenantConnection!
  
  # User queries
  user(id: UUID!): User
  userByEmail(email: String!): User
  userByKeycloakId(keycloakUserId: String!): User
  users(pagination: PaginationInput): UserConnection!
  usersByTenant(tenantId: UUID!, pagination: PaginationInput): UserConnection!
  systemAdmins(pagination: PaginationInput): UserConnection!
  tenantAdmins(tenantId: UUID!, pagination: PaginationInput): UserConnection!
  searchUsers(query: String!, pagination: PaginationInput): UserConnection!
  
  # User profile queries
  userProfile(userId: UUID!): User
  
  # User preferences queries
  userPreferences(userId: UUID!, tenantId: UUID): [UserPreference!]!
  userPreference(userId: UUID!, tenantId: UUID, category: String!, key: String!): String
  
  # User roles queries
  userRoles(userId: UUID!, tenantId: UUID): [UserRole!]!
  
  # Session queries
  userSessions(userId: UUID!): [UserSession!]!
  activeUserSessions(userId: UUID!): [UserSession!]!
  
  # File queries
  userFiles(userId: UUID!, category: String, pagination: PaginationInput): [File!]!
  file(id: UUID!): File
  
  # Domain queries
  tenantDomains(tenantId: UUID!): [TenantDomain!]!
  
  # API Key queries
  apiKeys(tenantId: UUID!, pagination: PaginationInput): [APIKey!]!
  
  # Audit Log queries
  auditLogs(tenantId: UUID!, pagination: PaginationInput): AuditLogConnection!
  auditLogsByUser(userId: UUID!, pagination: PaginationInput): AuditLogConnection!
  
  # RBAC queries
  role(id: UUID!): Role
  roles(tenantId: UUID, pagination: PaginationInput): RoleConnection!
  systemRoles: [Role!]!
  tenantRoles(tenantId: UUID!): [Role!]!
  
  permission(id: UUID!): Permission
  permissions(pagination: PaginationInput): PermissionConnection!
  permissionsByResource(resource: String!): [Permission!]!
  
  userRole(id: UUID!): UserRole
  allUserRoles(userId: UUID!): [UserRole!]!
  userRolesByTenant(tenantId: UUID!, pagination: PaginationInput): UserRoleConnection!
  userPermissions(userId: UUID!, tenantId: UUID!): [String!]!
  
  # Authorization checks
  hasPermission(userId: UUID!, resource: String!, action: String!, tenantId: UUID!): Boolean!
}

# Mutations
type Mutation {
  # Tenant mutations
  createTenant(input: CreateTenantInput!): Tenant!
  updateTenant(input: UpdateTenantInput!): Tenant!
  deleteTenant(id: UUID!): Boolean!
  
  # User mutations
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(id: UUID!): Boolean!
  
  # System Admin mutations
  createSystemAdmin(input: CreateSystemAdminInput!): User!
  updateSystemAdmin(input: UpdateUserInput!): User!
  deleteSystemAdmin(id: UUID!): Boolean!
  
  # Tenant Admin mutations
  createTenantAdmin(input: CreateTenantAdminInput!): User!
  updateTenantAdmin(tenantId: UUID!, input: UpdateUserInput!): User!
  deleteTenantAdmin(tenantId: UUID!, id: UUID!): Boolean!
  
  # Profile mutations
  updateProfile(input: UpdateProfileInput!): User!
  uploadAvatar(userId: UUID!, file: Upload!): User!
  deleteAvatar(userId: UUID!): Boolean!
  
  # User preferences mutations
  updateUserPreferences(input: UpdateUserPreferencesInput!): Boolean!
  setUserPreference(input: SetUserPreferenceInput!): Boolean!
  
  # User status mutations
  activateUser(userId: UUID!): User!
  deactivateUser(userId: UUID!): User!
  suspendUser(userId: UUID!): User!
  verifyEmail(userId: UUID!): User!
  verifyPhone(userId: UUID!): User!
  
  # User role mutations
  assignUserRole(input: AssignUserRoleInput!): UserRole!
  unassignUserRole(userId: UUID!, tenantId: UUID!, roleId: UUID!): Boolean!
  updateUserRoles(input: UpdateUserRolesInput!): [UserRole!]!
  
  # Session mutations
  revokeSession(sessionId: UUID!): Boolean!
  revokeAllSessions(userId: UUID!): Boolean!
  
  # Tenant-User relationship mutations
  addUserToTenant(input: AddUserToTenantInput!): TenantUser!
  removeUserFromTenant(tenantId: UUID!, userId: UUID!): Boolean!
  updateUserRole(tenantId: UUID!, userId: UUID!, role: String!): TenantUser!
  
  # Domain mutations
  addCustomDomain(input: CreateDomainInput!): TenantDomain!
  verifyDomain(id: UUID!): TenantDomain!
  setPrimaryDomain(tenantId: UUID!, domainId: UUID!): TenantDomain!
  deleteDomain(id: UUID!): Boolean!
  
  # API Key mutations
  createAPIKey(input: CreateAPIKeyInput!): APIKey!
  deleteAPIKey(id: UUID!): Boolean!
  
  # RBAC mutations
  createRole(input: CreateRoleInput!): Role!
  updateRole(id: UUID!, input: UpdateRoleInput!): Role!
  deleteRole(id: UUID!): Boolean!
  
  createPermission(input: CreatePermissionInput!): Permission!
  updatePermission(id: UUID!, input: CreatePermissionInput!): Permission!
  deletePermission(id: UUID!): Boolean!
  
  assignRole(input: AssignRoleInput!): UserRole!
  removeRole(userId: UUID!, roleId: UUID!, tenantId: UUID!): Boolean!
  
  # Tenant setup
  initializeTenantRoles(tenantId: UUID!): Boolean!
}

# Subscriptions
type Subscription {
  tenantUpdated(tenantId: UUID!): Tenant!
  auditLogCreated(tenantId: UUID!): AuditLog!
}
