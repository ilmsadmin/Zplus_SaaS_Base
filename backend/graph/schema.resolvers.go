package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/ilmsadmin/zplus-saas-base/graph/generated"
	"github.com/ilmsadmin/zplus-saas-base/graph/model"
	"github.com/ilmsadmin/zplus-saas-base/internal/domain"
)

// ID is the resolver for the id field.
func (r *aPIKeyResolver) ID(ctx context.Context, obj *domain.APIKey) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// TenantID is the resolver for the tenantId field.
func (r *aPIKeyResolver) TenantID(ctx context.Context, obj *domain.APIKey) (string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// ID is the resolver for the id field.
func (r *auditLogResolver) ID(ctx context.Context, obj *domain.AuditLog) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// TenantID is the resolver for the tenantId field.
func (r *auditLogResolver) TenantID(ctx context.Context, obj *domain.AuditLog) (string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// UserID is the resolver for the userId field.
func (r *auditLogResolver) UserID(ctx context.Context, obj *domain.AuditLog) (*string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// ID is the resolver for the id field.
func (r *fileResolver) ID(ctx context.Context, obj *domain.File) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// TenantID is the resolver for the tenantId field.
func (r *fileResolver) TenantID(ctx context.Context, obj *domain.File) (*string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// UserID is the resolver for the userId field.
func (r *fileResolver) UserID(ctx context.Context, obj *domain.File) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// Path is the resolver for the path field.
func (r *fileResolver) Path(ctx context.Context, obj *domain.File) (string, error) {
	panic(fmt.Errorf("not implemented: Path - path"))
}

// ExpiresAt is the resolver for the expiresAt field.
func (r *fileResolver) ExpiresAt(ctx context.Context, obj *domain.File) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: ExpiresAt - expiresAt"))
}

// Metadata is the resolver for the metadata field.
func (r *fileResolver) Metadata(ctx context.Context, obj *domain.File) (string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// CreateTenant is the resolver for the createTenant field.
func (r *mutationResolver) CreateTenant(ctx context.Context, input model.CreateTenantInput) (*domain.Tenant, error) {
	panic(fmt.Errorf("not implemented: CreateTenant - createTenant"))
}

// UpdateTenant is the resolver for the updateTenant field.
func (r *mutationResolver) UpdateTenant(ctx context.Context, input model.UpdateTenantInput) (*domain.Tenant, error) {
	panic(fmt.Errorf("not implemented: UpdateTenant - updateTenant"))
}

// DeleteTenant is the resolver for the deleteTenant field.
func (r *mutationResolver) DeleteTenant(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTenant - deleteTenant"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateSystemAdmin is the resolver for the createSystemAdmin field.
func (r *mutationResolver) CreateSystemAdmin(ctx context.Context, input model.CreateSystemAdminInput) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: CreateSystemAdmin - createSystemAdmin"))
}

// UpdateSystemAdmin is the resolver for the updateSystemAdmin field.
func (r *mutationResolver) UpdateSystemAdmin(ctx context.Context, input model.UpdateUserInput) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: UpdateSystemAdmin - updateSystemAdmin"))
}

// DeleteSystemAdmin is the resolver for the deleteSystemAdmin field.
func (r *mutationResolver) DeleteSystemAdmin(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSystemAdmin - deleteSystemAdmin"))
}

// CreateTenantAdmin is the resolver for the createTenantAdmin field.
func (r *mutationResolver) CreateTenantAdmin(ctx context.Context, input model.CreateTenantAdminInput) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: CreateTenantAdmin - createTenantAdmin"))
}

// UpdateTenantAdmin is the resolver for the updateTenantAdmin field.
func (r *mutationResolver) UpdateTenantAdmin(ctx context.Context, tenantID string, input model.UpdateUserInput) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: UpdateTenantAdmin - updateTenantAdmin"))
}

// DeleteTenantAdmin is the resolver for the deleteTenantAdmin field.
func (r *mutationResolver) DeleteTenantAdmin(ctx context.Context, tenantID string, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTenantAdmin - deleteTenantAdmin"))
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.UpdateProfileInput) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: UpdateProfile - updateProfile"))
}

// UploadAvatar is the resolver for the uploadAvatar field.
func (r *mutationResolver) UploadAvatar(ctx context.Context, userID string, file graphql.Upload) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: UploadAvatar - uploadAvatar"))
}

// DeleteAvatar is the resolver for the deleteAvatar field.
func (r *mutationResolver) DeleteAvatar(ctx context.Context, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAvatar - deleteAvatar"))
}

// UpdateUserPreferences is the resolver for the updateUserPreferences field.
func (r *mutationResolver) UpdateUserPreferences(ctx context.Context, input model.UpdateUserPreferencesInput) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateUserPreferences - updateUserPreferences"))
}

// SetUserPreference is the resolver for the setUserPreference field.
func (r *mutationResolver) SetUserPreference(ctx context.Context, input model.SetUserPreferenceInput) (bool, error) {
	panic(fmt.Errorf("not implemented: SetUserPreference - setUserPreference"))
}

// ActivateUser is the resolver for the activateUser field.
func (r *mutationResolver) ActivateUser(ctx context.Context, userID string) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: ActivateUser - activateUser"))
}

// DeactivateUser is the resolver for the deactivateUser field.
func (r *mutationResolver) DeactivateUser(ctx context.Context, userID string) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: DeactivateUser - deactivateUser"))
}

// SuspendUser is the resolver for the suspendUser field.
func (r *mutationResolver) SuspendUser(ctx context.Context, userID string) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: SuspendUser - suspendUser"))
}

// VerifyEmail is the resolver for the verifyEmail field.
func (r *mutationResolver) VerifyEmail(ctx context.Context, userID string) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: VerifyEmail - verifyEmail"))
}

// VerifyPhone is the resolver for the verifyPhone field.
func (r *mutationResolver) VerifyPhone(ctx context.Context, userID string) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: VerifyPhone - verifyPhone"))
}

// AssignUserRole is the resolver for the assignUserRole field.
func (r *mutationResolver) AssignUserRole(ctx context.Context, input model.AssignUserRoleInput) (*domain.UserRole, error) {
	panic(fmt.Errorf("not implemented: AssignUserRole - assignUserRole"))
}

// UnassignUserRole is the resolver for the unassignUserRole field.
func (r *mutationResolver) UnassignUserRole(ctx context.Context, userID string, tenantID string, roleID string) (bool, error) {
	panic(fmt.Errorf("not implemented: UnassignUserRole - unassignUserRole"))
}

// UpdateUserRoles is the resolver for the updateUserRoles field.
func (r *mutationResolver) UpdateUserRoles(ctx context.Context, input model.UpdateUserRolesInput) ([]*domain.UserRole, error) {
	panic(fmt.Errorf("not implemented: UpdateUserRoles - updateUserRoles"))
}

// RevokeSession is the resolver for the revokeSession field.
func (r *mutationResolver) RevokeSession(ctx context.Context, sessionID string) (bool, error) {
	panic(fmt.Errorf("not implemented: RevokeSession - revokeSession"))
}

// RevokeAllSessions is the resolver for the revokeAllSessions field.
func (r *mutationResolver) RevokeAllSessions(ctx context.Context, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: RevokeAllSessions - revokeAllSessions"))
}

// AddUserToTenant is the resolver for the addUserToTenant field.
func (r *mutationResolver) AddUserToTenant(ctx context.Context, input model.AddUserToTenantInput) (*domain.TenantUser, error) {
	panic(fmt.Errorf("not implemented: AddUserToTenant - addUserToTenant"))
}

// RemoveUserFromTenant is the resolver for the removeUserFromTenant field.
func (r *mutationResolver) RemoveUserFromTenant(ctx context.Context, tenantID string, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveUserFromTenant - removeUserFromTenant"))
}

// UpdateUserRole is the resolver for the updateUserRole field.
func (r *mutationResolver) UpdateUserRole(ctx context.Context, tenantID string, userID string, role string) (*domain.TenantUser, error) {
	panic(fmt.Errorf("not implemented: UpdateUserRole - updateUserRole"))
}

// AddCustomDomain is the resolver for the addCustomDomain field.
func (r *mutationResolver) AddCustomDomain(ctx context.Context, input model.CreateDomainInput) (*domain.TenantDomain, error) {
	panic(fmt.Errorf("not implemented: AddCustomDomain - addCustomDomain"))
}

// VerifyDomain is the resolver for the verifyDomain field.
func (r *mutationResolver) VerifyDomain(ctx context.Context, id string) (*domain.TenantDomain, error) {
	panic(fmt.Errorf("not implemented: VerifyDomain - verifyDomain"))
}

// SetPrimaryDomain is the resolver for the setPrimaryDomain field.
func (r *mutationResolver) SetPrimaryDomain(ctx context.Context, tenantID string, domainID string) (*domain.TenantDomain, error) {
	panic(fmt.Errorf("not implemented: SetPrimaryDomain - setPrimaryDomain"))
}

// DeleteDomain is the resolver for the deleteDomain field.
func (r *mutationResolver) DeleteDomain(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDomain - deleteDomain"))
}

// CreateAPIKey is the resolver for the createAPIKey field.
func (r *mutationResolver) CreateAPIKey(ctx context.Context, input model.CreateAPIKeyInput) (*domain.APIKey, error) {
	panic(fmt.Errorf("not implemented: CreateAPIKey - createAPIKey"))
}

// DeleteAPIKey is the resolver for the deleteAPIKey field.
func (r *mutationResolver) DeleteAPIKey(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAPIKey - deleteAPIKey"))
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRoleInput) (*domain.Role, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id string, input model.UpdateRoleInput) (*domain.Role, error) {
	panic(fmt.Errorf("not implemented: UpdateRole - updateRole"))
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRole - deleteRole"))
}

// CreatePermission is the resolver for the createPermission field.
func (r *mutationResolver) CreatePermission(ctx context.Context, input model.CreatePermissionInput) (*domain.Permission, error) {
	panic(fmt.Errorf("not implemented: CreatePermission - createPermission"))
}

// UpdatePermission is the resolver for the updatePermission field.
func (r *mutationResolver) UpdatePermission(ctx context.Context, id string, input model.CreatePermissionInput) (*domain.Permission, error) {
	panic(fmt.Errorf("not implemented: UpdatePermission - updatePermission"))
}

// DeletePermission is the resolver for the deletePermission field.
func (r *mutationResolver) DeletePermission(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePermission - deletePermission"))
}

// AssignRole is the resolver for the assignRole field.
func (r *mutationResolver) AssignRole(ctx context.Context, input model.AssignRoleInput) (*domain.UserRole, error) {
	panic(fmt.Errorf("not implemented: AssignRole - assignRole"))
}

// RemoveRole is the resolver for the removeRole field.
func (r *mutationResolver) RemoveRole(ctx context.Context, userID string, roleID string, tenantID string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveRole - removeRole"))
}

// InitializeTenantRoles is the resolver for the initializeTenantRoles field.
func (r *mutationResolver) InitializeTenantRoles(ctx context.Context, tenantID string) (bool, error) {
	panic(fmt.Errorf("not implemented: InitializeTenantRoles - initializeTenantRoles"))
}

// ID is the resolver for the id field.
func (r *permissionResolver) ID(ctx context.Context, obj *domain.Permission) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Tenant is the resolver for the tenant field.
func (r *queryResolver) Tenant(ctx context.Context, id string) (*domain.Tenant, error) {
	panic(fmt.Errorf("not implemented: Tenant - tenant"))
}

// TenantBySubdomain is the resolver for the tenantBySubdomain field.
func (r *queryResolver) TenantBySubdomain(ctx context.Context, subdomain string) (*domain.Tenant, error) {
	panic(fmt.Errorf("not implemented: TenantBySubdomain - tenantBySubdomain"))
}

// Tenants is the resolver for the tenants field.
func (r *queryResolver) Tenants(ctx context.Context, pagination *model.PaginationInput) (*model.TenantConnection, error) {
	panic(fmt.Errorf("not implemented: Tenants - tenants"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// UserByEmail is the resolver for the userByEmail field.
func (r *queryResolver) UserByEmail(ctx context.Context, email string) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: UserByEmail - userByEmail"))
}

// UserByKeycloakID is the resolver for the userByKeycloakId field.
func (r *queryResolver) UserByKeycloakID(ctx context.Context, keycloakUserID string) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: UserByKeycloakID - userByKeycloakId"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, pagination *model.PaginationInput) (*model.UserConnection, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// UsersByTenant is the resolver for the usersByTenant field.
func (r *queryResolver) UsersByTenant(ctx context.Context, tenantID string, pagination *model.PaginationInput) (*model.UserConnection, error) {
	panic(fmt.Errorf("not implemented: UsersByTenant - usersByTenant"))
}

// SystemAdmins is the resolver for the systemAdmins field.
func (r *queryResolver) SystemAdmins(ctx context.Context, pagination *model.PaginationInput) (*model.UserConnection, error) {
	panic(fmt.Errorf("not implemented: SystemAdmins - systemAdmins"))
}

// TenantAdmins is the resolver for the tenantAdmins field.
func (r *queryResolver) TenantAdmins(ctx context.Context, tenantID string, pagination *model.PaginationInput) (*model.UserConnection, error) {
	panic(fmt.Errorf("not implemented: TenantAdmins - tenantAdmins"))
}

// SearchUsers is the resolver for the searchUsers field.
func (r *queryResolver) SearchUsers(ctx context.Context, query string, pagination *model.PaginationInput) (*model.UserConnection, error) {
	panic(fmt.Errorf("not implemented: SearchUsers - searchUsers"))
}

// UserProfile is the resolver for the userProfile field.
func (r *queryResolver) UserProfile(ctx context.Context, userID string) (*domain.User, error) {
	panic(fmt.Errorf("not implemented: UserProfile - userProfile"))
}

// UserPreferences is the resolver for the userPreferences field.
func (r *queryResolver) UserPreferences(ctx context.Context, userID string, tenantID *string) ([]*domain.UserPreference, error) {
	panic(fmt.Errorf("not implemented: UserPreferences - userPreferences"))
}

// UserPreference is the resolver for the userPreference field.
func (r *queryResolver) UserPreference(ctx context.Context, userID string, tenantID *string, category string, key string) (*string, error) {
	panic(fmt.Errorf("not implemented: UserPreference - userPreference"))
}

// UserRoles is the resolver for the userRoles field.
func (r *queryResolver) UserRoles(ctx context.Context, userID string, tenantID *string) ([]*domain.UserRole, error) {
	panic(fmt.Errorf("not implemented: UserRoles - userRoles"))
}

// UserSessions is the resolver for the userSessions field.
func (r *queryResolver) UserSessions(ctx context.Context, userID string) ([]*domain.UserSession, error) {
	panic(fmt.Errorf("not implemented: UserSessions - userSessions"))
}

// ActiveUserSessions is the resolver for the activeUserSessions field.
func (r *queryResolver) ActiveUserSessions(ctx context.Context, userID string) ([]*domain.UserSession, error) {
	panic(fmt.Errorf("not implemented: ActiveUserSessions - activeUserSessions"))
}

// UserFiles is the resolver for the userFiles field.
func (r *queryResolver) UserFiles(ctx context.Context, userID string, category *string, pagination *model.PaginationInput) ([]*domain.File, error) {
	panic(fmt.Errorf("not implemented: UserFiles - userFiles"))
}

// File is the resolver for the file field.
func (r *queryResolver) File(ctx context.Context, id string) (*domain.File, error) {
	panic(fmt.Errorf("not implemented: File - file"))
}

// TenantDomains is the resolver for the tenantDomains field.
func (r *queryResolver) TenantDomains(ctx context.Context, tenantID string) ([]*domain.TenantDomain, error) {
	panic(fmt.Errorf("not implemented: TenantDomains - tenantDomains"))
}

// APIKeys is the resolver for the apiKeys field.
func (r *queryResolver) APIKeys(ctx context.Context, tenantID string, pagination *model.PaginationInput) ([]*domain.APIKey, error) {
	panic(fmt.Errorf("not implemented: APIKeys - apiKeys"))
}

// AuditLogs is the resolver for the auditLogs field.
func (r *queryResolver) AuditLogs(ctx context.Context, tenantID string, pagination *model.PaginationInput) (*model.AuditLogConnection, error) {
	panic(fmt.Errorf("not implemented: AuditLogs - auditLogs"))
}

// AuditLogsByUser is the resolver for the auditLogsByUser field.
func (r *queryResolver) AuditLogsByUser(ctx context.Context, userID string, pagination *model.PaginationInput) (*model.AuditLogConnection, error) {
	panic(fmt.Errorf("not implemented: AuditLogsByUser - auditLogsByUser"))
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id string) (*domain.Role, error) {
	panic(fmt.Errorf("not implemented: Role - role"))
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, tenantID *string, pagination *model.PaginationInput) (*model.RoleConnection, error) {
	panic(fmt.Errorf("not implemented: Roles - roles"))
}

// SystemRoles is the resolver for the systemRoles field.
func (r *queryResolver) SystemRoles(ctx context.Context) ([]*domain.Role, error) {
	panic(fmt.Errorf("not implemented: SystemRoles - systemRoles"))
}

// TenantRoles is the resolver for the tenantRoles field.
func (r *queryResolver) TenantRoles(ctx context.Context, tenantID string) ([]*domain.Role, error) {
	panic(fmt.Errorf("not implemented: TenantRoles - tenantRoles"))
}

// Permission is the resolver for the permission field.
func (r *queryResolver) Permission(ctx context.Context, id string) (*domain.Permission, error) {
	panic(fmt.Errorf("not implemented: Permission - permission"))
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(ctx context.Context, pagination *model.PaginationInput) (*model.PermissionConnection, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// PermissionsByResource is the resolver for the permissionsByResource field.
func (r *queryResolver) PermissionsByResource(ctx context.Context, resource string) ([]*domain.Permission, error) {
	panic(fmt.Errorf("not implemented: PermissionsByResource - permissionsByResource"))
}

// UserRole is the resolver for the userRole field.
func (r *queryResolver) UserRole(ctx context.Context, id string) (*domain.UserRole, error) {
	panic(fmt.Errorf("not implemented: UserRole - userRole"))
}

// AllUserRoles is the resolver for the allUserRoles field.
func (r *queryResolver) AllUserRoles(ctx context.Context, userID string) ([]*domain.UserRole, error) {
	panic(fmt.Errorf("not implemented: AllUserRoles - allUserRoles"))
}

// UserRolesByTenant is the resolver for the userRolesByTenant field.
func (r *queryResolver) UserRolesByTenant(ctx context.Context, tenantID string, pagination *model.PaginationInput) (*model.UserRoleConnection, error) {
	panic(fmt.Errorf("not implemented: UserRolesByTenant - userRolesByTenant"))
}

// UserPermissions is the resolver for the userPermissions field.
func (r *queryResolver) UserPermissions(ctx context.Context, userID string, tenantID string) ([]string, error) {
	panic(fmt.Errorf("not implemented: UserPermissions - userPermissions"))
}

// HasPermission is the resolver for the hasPermission field.
func (r *queryResolver) HasPermission(ctx context.Context, userID string, resource string, action string, tenantID string) (bool, error) {
	panic(fmt.Errorf("not implemented: HasPermission - hasPermission"))
}

// ID is the resolver for the id field.
func (r *roleResolver) ID(ctx context.Context, obj *domain.Role) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// TenantID is the resolver for the tenantId field.
func (r *roleResolver) TenantID(ctx context.Context, obj *domain.Role) (*string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// TenantUpdated is the resolver for the tenantUpdated field.
func (r *subscriptionResolver) TenantUpdated(ctx context.Context, tenantID string) (<-chan *domain.Tenant, error) {
	panic(fmt.Errorf("not implemented: TenantUpdated - tenantUpdated"))
}

// AuditLogCreated is the resolver for the auditLogCreated field.
func (r *subscriptionResolver) AuditLogCreated(ctx context.Context, tenantID string) (<-chan *domain.AuditLog, error) {
	panic(fmt.Errorf("not implemented: AuditLogCreated - auditLogCreated"))
}

// ID is the resolver for the id field.
func (r *tenantResolver) ID(ctx context.Context, obj *domain.Tenant) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *tenantDomainResolver) ID(ctx context.Context, obj *domain.TenantDomain) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// TenantID is the resolver for the tenantId field.
func (r *tenantDomainResolver) TenantID(ctx context.Context, obj *domain.TenantDomain) (string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// Branding is the resolver for the branding field.
func (r *tenantSettingsResolver) Branding(ctx context.Context, obj *domain.TenantSettings) (*domain.TenantBranding, error) {
	panic(fmt.Errorf("not implemented: Branding - branding"))
}

// ID is the resolver for the id field.
func (r *tenantUserResolver) ID(ctx context.Context, obj *domain.TenantUser) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// TenantID is the resolver for the tenantId field.
func (r *tenantUserResolver) TenantID(ctx context.Context, obj *domain.TenantUser) (string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// UserID is the resolver for the userId field.
func (r *tenantUserResolver) UserID(ctx context.Context, obj *domain.TenantUser) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *domain.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Preferences is the resolver for the preferences field.
func (r *userResolver) Preferences(ctx context.Context, obj *domain.User) (*string, error) {
	panic(fmt.Errorf("not implemented: Preferences - preferences"))
}

// Metadata is the resolver for the metadata field.
func (r *userResolver) Metadata(ctx context.Context, obj *domain.User) (*string, error) {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// ID is the resolver for the id field.
func (r *userPreferenceResolver) ID(ctx context.Context, obj *domain.UserPreference) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the userId field.
func (r *userPreferenceResolver) UserID(ctx context.Context, obj *domain.UserPreference) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// TenantID is the resolver for the tenantId field.
func (r *userPreferenceResolver) TenantID(ctx context.Context, obj *domain.UserPreference) (*string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// Value is the resolver for the value field.
func (r *userPreferenceResolver) Value(ctx context.Context, obj *domain.UserPreference) (string, error) {
	panic(fmt.Errorf("not implemented: Value - value"))
}

// ID is the resolver for the id field.
func (r *userRoleResolver) ID(ctx context.Context, obj *domain.UserRole) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the userId field.
func (r *userRoleResolver) UserID(ctx context.Context, obj *domain.UserRole) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// RoleID is the resolver for the roleId field.
func (r *userRoleResolver) RoleID(ctx context.Context, obj *domain.UserRole) (string, error) {
	panic(fmt.Errorf("not implemented: RoleID - roleId"))
}

// TenantID is the resolver for the tenantId field.
func (r *userRoleResolver) TenantID(ctx context.Context, obj *domain.UserRole) (string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// ID is the resolver for the id field.
func (r *userSessionResolver) ID(ctx context.Context, obj *domain.UserSession) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the userId field.
func (r *userSessionResolver) UserID(ctx context.Context, obj *domain.UserSession) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// TenantID is the resolver for the tenantId field.
func (r *userSessionResolver) TenantID(ctx context.Context, obj *domain.UserSession) (*string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// APIKey returns generated.APIKeyResolver implementation.
func (r *Resolver) APIKey() generated.APIKeyResolver { return &aPIKeyResolver{r} }

// AuditLog returns generated.AuditLogResolver implementation.
func (r *Resolver) AuditLog() generated.AuditLogResolver { return &auditLogResolver{r} }

// File returns generated.FileResolver implementation.
func (r *Resolver) File() generated.FileResolver { return &fileResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Permission returns generated.PermissionResolver implementation.
func (r *Resolver) Permission() generated.PermissionResolver { return &permissionResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Role returns generated.RoleResolver implementation.
func (r *Resolver) Role() generated.RoleResolver { return &roleResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

// Tenant returns generated.TenantResolver implementation.
func (r *Resolver) Tenant() generated.TenantResolver { return &tenantResolver{r} }

// TenantDomain returns generated.TenantDomainResolver implementation.
func (r *Resolver) TenantDomain() generated.TenantDomainResolver { return &tenantDomainResolver{r} }

// TenantSettings returns generated.TenantSettingsResolver implementation.
func (r *Resolver) TenantSettings() generated.TenantSettingsResolver {
	return &tenantSettingsResolver{r}
}

// TenantUser returns generated.TenantUserResolver implementation.
func (r *Resolver) TenantUser() generated.TenantUserResolver { return &tenantUserResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

// UserPreference returns generated.UserPreferenceResolver implementation.
func (r *Resolver) UserPreference() generated.UserPreferenceResolver {
	return &userPreferenceResolver{r}
}

// UserRole returns generated.UserRoleResolver implementation.
func (r *Resolver) UserRole() generated.UserRoleResolver { return &userRoleResolver{r} }

// UserSession returns generated.UserSessionResolver implementation.
func (r *Resolver) UserSession() generated.UserSessionResolver { return &userSessionResolver{r} }

type aPIKeyResolver struct{ *Resolver }
type auditLogResolver struct{ *Resolver }
type fileResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type permissionResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roleResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type tenantResolver struct{ *Resolver }
type tenantDomainResolver struct{ *Resolver }
type tenantSettingsResolver struct{ *Resolver }
type tenantUserResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type userPreferenceResolver struct{ *Resolver }
type userRoleResolver struct{ *Resolver }
type userSessionResolver struct{ *Resolver }
